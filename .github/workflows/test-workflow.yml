---
# Environment upgrade processing
name: "Process Upgrades (base)"

permissions:
  id-token: write
  contents: read

on:
  workflow_call:
    inputs:
      dry_run:
        description: "Dry Run (just list, don't create or merge)"
        required: true
        default: true
        type: boolean
      auto_merge:
        description: "Merge a PR if it gets created"
        required: true
        default: true
        type: boolean
      environment:
        default: "preproduction"
        type: string
        description: "Environment to target"
        required: true
        #options:
        #  - development
        #  - integration
        #  - preproduction
        #  - production
      deployment_type:
        default: "management"
        type: string
        description: "Type of deployment"
        required: true
        #options:
        #  - management
        #  - customer
      release_branch:
        description: ""
        required: false
        type: string
      sre_branch:
        description: ""
        required: false
        type: string
      limit:
        description: ""
        required: false
        default: ""
        type: string

jobs:
  whole-shebang:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Repo"
        uses: actions/checkout@v4

      - name: Define real-time environment variables
        env:
          GH_TOKEN: ${{ secrets.TEST_TOKEN }}
        run: |
          HAS_NEXT_PAGE=true
          CURSOR="\"\""
          if [[ "${{ inputs.release_branch }}" == "" ]]; then
            while $HAS_NEXT_PAGE
            do
              LATEST_RELEASE=$(gh api graphql -f query='
                query ($CURSOR: String!) {
                  repository(owner: "aldato", name: "eda-hackathon") {
                    releases(after: $CURSOR,
                            first: 1, orderBy: {field: CREATED_AT, direction: DESC}) {
                      pageInfo {hasNextPage, startCursor}
                      nodes {
                        name
                        isPrerelease
                        isDraft
                      }
                    }
                  }
                }')
              IS_DRAFT=$(echo $LATEST_RELEASE | jq -r '.data.repository.releases.nodes[].isDraft')
              IS_PRERELEASE=$(echo $LATEST_RELEASE | jq -r '.data.repository.releases.nodes[].isPrerelease')
              if [[ !($IS_DRAFT) || $IS_PRERELEASE ]]; then
                MODEL_BRANCH=$(echo $LATEST_RELEASE | jq -r '.data.repository.releases.nodes[].name')
                break
              fi
              HAS_NEXT_PAGE=$(echo $LATEST_RELEASE | jq -r '.data.repository.releases.pageInfo.hasNextPage')
              if [[ !($HAS_NEXT_PAGE) ]]; then
                echo "No valid prerelease is present"
                exit 1
              fi
              CURSOR=$(echo $LATEST_RELEASE | jq -r '.data.repository.releases.pageInfo.startCursor')
            done
            echo "MODEL_BRANCH=$MODEL_BRANCH" >> $GITHUB_ENV
            echo "Using model branch "$MODEL_BRANCH
            echo "SRE_BRANCH=$MODEL_BRANCH" >> $GITHUB_ENV
            SRE_BRANCH=$MODEL_BRANCH
            echo "Using sre branch "$SRE_BRANCH
            echo "Dry run is "${{ inputs.dry_run }}
            echo "Auto merge is "${{ inputs.auto_merge }}
          fi