---
# Environment upgrade processing
name: "Process Upgrades (base)"

permissions:
  id-token: write
  contents: read

on:
  workflow_call:
    inputs:
      dry_run:
        description: "Dry Run (just list, don't create or merge)"
        required: true
        default: true
        type: boolean
      auto_merge:
        description: "Merge a PR if it gets created"
        required: true
        default: true
        type: boolean
      environment:
        default: "preproduction"
        type: string
        description: "Environment to target"
        required: true
        #options:
        #  - development
        #  - integration
        #  - preproduction
        #  - production
      deployment_type:
        default: "management"
        type: string
        description: "Type of deployment"
        required: true
        #options:
        #  - management
        #  - customer
      release_branch:
        description: ""
        required: false
        type: string
      sre_branch:
        description: ""
        required: false
        type: string
      limit:
        description: ""
        required: false
        default: ""
        type: string

jobs:
  whole-shebang:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Repo"
        uses: actions/checkout@v4

      - name: Define real-time environment variables
        env:
          GH_TOKEN: ${{ secrets.TEST_TOKEN }}
        run: |
          LATEST_RELEASE=$(gh api graphql -f query='
            query {
              repository(owner: "aldato", name: "eda-hackathon") {
                releases(first: 1, orderBy: {field: CREATED_AT, direction: DESC}) {
                  nodes {
                    name
                    isPrerelease
                    isDraft
                  }
                }
              }
            }')
          IS_DRAFT=$(echo $LATEST_RELEASE | jq -r '.data.repository.releases.nodes[].isDraft')
          IS_PRERELEASE=$(echo $LATEST_RELEASE | jq -r '.data.repository.releases.nodes[].isPrerelease')
          IS_NAME_EMPTY=$(echo $LATEST_RELEASE | jq -r '.data.repository.releases.nodes[].name')
          if [ "$IS_DRAFT" != "true" ] && [ "$IS_PRERELEASE" == "true" ] && [ "$IS_NAME_EMPTY" != "" ] && [ "${{ inputs.environment }}" == "preproduction" ]; then
            echo "Preproduction prerelase ${{ inputs.release_branch }}"
            MODEL_BRANCH=$(echo $LATEST_RELEASE | jq -r '.data.repository.releases.nodes[].name')
          elif [ "$IS_DRAFT" != "true" ] && [ "$IS_PRERELEASE" == "false" ] && [ "$IS_NAME_EMPTY" != "" ] && [ "${{ inputs.environment }}" == "production" ]; then
            echo "Production release ${{ inputs.release_branch }}"
            MODEL_BRANCH=$(echo $LATEST_RELEASE | jq -r '.data.repository.releases.nodes[].name')
          else
            echo "No valid release is present"
            exit 1
          fi
          if [[ "${{ inputs.release_branch }}" != "$MODEL_BRANCH" ]]; then
            echo "Release branch used doesn't match current release name"
            exit 1
          fi

          MODEL_BRANCH=${{ inputs.release_branch }}
          echo "MODEL_BRANCH=$MODEL_BRANCH" >> $GITHUB_ENV
          echo "Using model branch "$MODEL_BRANCH
          echo "SRE_BRANCH=$MODEL_BRANCH" >> $GITHUB_ENV
          SRE_BRANCH=$MODEL_BRANCH
          echo "Using SRE branch "$SRE_BRANCH
          echo "Dry run is "${{ inputs.dry_run }}
          echo "Auto merge is "${{ inputs.auto_merge }}
